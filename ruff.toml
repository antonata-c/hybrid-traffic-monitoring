target-version = "py312"

line-length = 120

exclude = [".venv", "__pycache__", ".git", "alembic", "tests"]

src = ["src"]

[lint]
select = [
    "A",    # flake8-builtins | Выявления случаев, когда имена переменных, аргументов функций или атрибутов классов затеняют встроенные имена Python
    "ANN",  # flake8-annotations | Проверка заполненных аннотаций
    "ARG",  # flake8-unused-arguments | Выявление неиспользуемых аргументов в функциях, методах, классах, статических методах и лямбда-функциях
    "ASYNC",# flake8-async | Выявление ошибок с асинхронностью
    "B",    # flake8-bugbear | Находит общие ошибки и неоднозначности в коде
    "C",    # flake8-comprehensions | Проверка стилевых ошибок, которые связаны с соглашениями кодирования convention messages
    "COM",  # flake8-commas | Проверка наличия запятой в конце строк
    "C4",   # flake8-comprehensions | Проверяет правильность и эффективность использования list, set, dict comprehensions
    "C90",  # mccabe | Проверка сложности функций
    "DTZ",  # flake8-datetimez | Выявление проблем использования объектов даты и времени без учета временных зон
    "E",    # pycodestyle errors |
    "ERA",  # eradicate | Проверяет наличие закомментированного кода
    "F",    # pyflakes | Ошибки, такие как неиспользуемые импорты и переменные
    "FBT",  # flake8-boolean-trap | Ошибки при использовании булевых типов в аннотации функций
    "FAST", # fastapi |
    "FURB", # refurb | Выявление и предложение улучшений в коде, связанных с использованием более эффективных, чистых или современных практик программирования
    "I",    # isort | Правила для сортировки импортов
    "ICN",  # flake8-import-conventions | Соответствие имен при импорте согласно конвенции
    "ISC",  # flake8-implicit-str-concat | Проверяет использование неэффективной конкатенации строк
    "N",    # pep8-naming | Соблюдение соглашения о наименовании
    "PERF", # perflint | Правила, направленные на выявление потенциальных проблем с производительностью
    "RET",  # flake8-return | Ошибки return
    "PIE",  # flake8-pie |
    "PL",   # Pylint | Правила
    "RUF",  # Ruff | Мелочи от Ruff
    "SIM",  # flake8-simplify | Проверяет наличие ненужной вложенности нескольких последовательных менеджеров контекста
    "SLF",  # flake8-self | Проверяет доступ к «частным» членам класса
    "TCH",  # flake8-type-checking | Подсказки по тайпчекингу
    "TD",   # flake8-todos | Правила, правильного написания задач
    "T20",  # flake8-print | Выявления случаев, использование отладчика в продакшен-коде
    "UP",   # pyupgrade | Новых функций языка и замену устаревших конструкций на более эффективные и безопасные аналоги
    "W",    # pycodestyle warnings |
]

ignore = [
    "B008",
    "RUF001",
    "RUF002",
    "RUF003",
    "ASYNC109",
    "TD003",
]

[format]
quote-style = "double"